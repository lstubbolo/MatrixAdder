#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>
#include "xtime_l.h"
#include "xparameters.h"


volatile u32 *const REG = (u32 *const) XPAR_MATRIX_0_0_S00_AXI_BASEADDR;


//  function stubs
int16_t randomNum(int test, int reset);
void resetFPGA(int max);


//  constants for random numbers
const int16_t maxVal = 0x7FFF;
const int16_t minVal = 0xFFFF;

//	maximum matrix size
const unsigned int max_N = 8;

//	look-up table of output registers to improve performance
const int OUT_REG[8][8] = {
		{256, 257, 258, 259, 260, 261, 262, 263},
		{264, 265, 266, 267, 268, 269, 270, 271},
		{272, 273, 274, 275, 276, 277, 278, 279},
		{280, 281, 282, 283, 284, 285, 286, 287},
		{288, 289, 290, 291, 292, 293, 294, 295},
		{296, 297, 298, 299, 300, 301, 302, 303},
		{304, 305, 306, 307, 308, 309, 310, 311},
		{312, 313, 314, 315, 316, 317, 318, 319}
};


int main() {


    //  matrix size constant
    const unsigned int N = 8;

    //  testing mode: if reset = 1, A and B initialized to 0
    const unsigned int reset = 0;

    //  testing mode: if test  = 1, A and B initialized to 2
    const unsigned int test = 1;

    //  print all steps of output
    const unsigned int printOut = 1;

    //  print in Decimal rather than Hex
    const unsigned int printHex = 1;

    xil_printf("Hello, World!\n\r");

    volatile uint32_t A[N][N];		 //	 input A
    volatile uint32_t B[N][N];		 //	 input B

//  output matrices
    volatile uint32_t C_1[N][N];     //  software calculated
    volatile uint32_t C_2[N][N];     //  hardware calculated


//	timing variables
    XTime proc_Start;
    XTime proc_End;
    XTime FPGA_Start;
    XTime FPGA_End;

    const unsigned int TO_MICROS = COUNTS_PER_SECOND/1000000;
    unsigned long long int proc_cycles;
    unsigned long long int FPGA_cycles;
    float proc_micros;
    float FPGA_micros;


//	fill FPGA with 0's
    resetFPGA(max_N);

//  fill A and B with random numbers
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < N; col++) {
			A[row][col] = (uint32_t) randomNum(test, reset);
			B[row][col] = (uint32_t) randomNum(test, reset);
		}
	}

//  print out A & B matrices if print out flag is 1
/*    if(printOut > 0) {
        //  print out Matrix A
        xil_printf("\n\rMATRIX A:\n\r");
        for (int row = 0; row < N; row++) {
            xil_printf("");
            for (int col = 0; col < N; col++) {
                //  display output as either hex or decimal depending on flag
                if (printHex > 0)
                    xil_printf("%08X  ", A[row][col]);
                else
                    xil_printf("%05d ", A[row][col]);
            }
            xil_printf("\n\r");
        }

        //  print out Matrix B
        xil_printf("\n\rMATRIX B:\n\r");
        for (int row = 0; row < N; row++) {
            xil_printf("");
            for (int col = 0; col < N; col++) {
                //  display output as either hex or decimal depending on flag
                if (printHex > 0)
                    xil_printf("%08X  ", B[row][col]);
                else
                    xil_printf("%05d ", B[row][col]);
            }
            xil_printf("\n\r");
        }
    }   //  end A & B print out
*/



//	Processor Time Start   	* * * * * * * * * * * * * * * * * * * * * * *
    XTime_GetTime(&proc_Start);

//  processor multiplication
    for (int row = 0; row < N; row++) {
        for (int col =0; col < N; col ++) {
            int temp = 0;
            for (int idx = 0; idx < N; idx++) {
                temp += A[row][idx] * B[idx][col];
            }
            C_1[row][col] = temp;
        }
    }
//	Processor Time Stop   	* * * * * * * * * * * * * * * * * * * * * * *
	XTime_GetTime(&proc_End);

	//	calculate processor timing
	proc_cycles = 2 * (proc_End - proc_Start);
	FPGA_micros = (float)((float)proc_End - (float)proc_Start) / (float)TO_MICROS;


    //  print matrix C_1 if print out flag is set to 1
    if(printOut > 0) {
        xil_printf("\n\rMATRIX C_1:\n\r");
        for (int row = 0; row < N; row++) {
            for (int col = 0; col < N; col++) {
                //  display output as either hex or decimal depending on flag
                if (printHex > 0)
                    xil_printf("%08X  ", C_1[row][col]);
                else
                    xil_printf("%05d ", C_1[row][col]);
            }
            xil_printf("\n\r");
        }
    }   //  end print out C_1

    xil_printf("\n\r");


//	FPGA Time Start  		* * * * * * * * * * * * * * * * * * * * * * * *
    XTime_GetTime(&FPGA_Start);

    //  copy A & B values over to FPGA
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            int idx = (row * 8) + col;
            REG[idx] = A[row][col];
            REG[idx + 128] = B[row][col];
        }
    }

    //  copy Values from REG to c_2
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            C_2[row][col] = REG[OUT_REG[row][col]];
        }
    }

//	FPGA Time Stop   		* * * * * * * * * * * * * * * * * * * * * * * *
	XTime_GetTime(&FPGA_End);

	//	Calculate FPGA timing
	FPGA_cycles = 2 * (FPGA_End - FPGA_Start);
	FPGA_micros = (float)((float)FPGA_End - (float)FPGA_Start) / (float)TO_MICROS;


    //  print contents of FPGA registers
    //	prints N rows of 8 registers
    //	cycles through starting index of A, B and C
    xil_printf("\n\rRegister Contents\n\r\n\r");
    for(int k = 0; k < 3; k++) {
        int start = k*128;
        int end = start + (N*8) -1;

        //  print out label
        switch (k){
            case 0:  xil_printf("\n\r\n\rMATRIX A\t");	break;
            case 1:  xil_printf("\n\r\n\rMATRIX B\t");	break;
            case 2:  xil_printf("\n\r\n\rMATRIX C\t");	break;
            default: xil_printf("\n\r\n\rMATRIX X\t");	break;
        }
        xil_printf("REGISTERS: %03d - %03d\t", start, end);
        xil_printf("N = %d\n\rv", N);

        //	print out spacer
        for (int i = 0; i <= (10*N)-3; i++)
            xil_printf("-");
        xil_printf("v");

        //	print out N x 8 registers
        for (int i = start; i <= end; i++) {
            if (i % 8 == 0)
                xil_printf("\n\r ");
            xil_printf("%08X  ", REG[i]);
        }
    }


    xil_printf("\n\r\n\rRESULTS:  ");
	xil_printf("Software: %d cycles, %d micros  ", proc_cycles, proc_micros);
	xil_printf("Hardware: %d cycles, %d micros  ", FPGA_cycles, FPGA_micros);
    xil_printf("N=%d\n\r", N);
    //	check if C_1 and C_2 match
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < N; col++) {
			if (C_1[row][col] == C_2[row][col])
				xil_printf("true   ");
			else
				xil_printf("false  ");
		}
		xil_printf("\n\r");
    }

    return 0;
}



//	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *




//	resets values in the output registers of the FPGA
void resetFPGA(int max_N){
    for (int row = 0; row < max_N; row++) {
        for (int col = 0; col < max_N; col++) {
            int idx = (row * 8) + col;

            REG[idx] = 0;
            REG[idx + 128] = 0;
            REG[idx + 256] = 0;
        }
    }
}

int16_t randomNum(int test, int reset){
    int16_t val;

    if (reset > 0)
        val = 0;
    else if (test > 0)
        val = 0x000F;
    else
        val = (rand() % (maxVal - minVal + 1)) + minVal;

    return val;
}
